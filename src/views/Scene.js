/*
  Auto-generated by Spline
*/

import useSpline from '@splinetool/r3f-spline'
import { PerspectiveCamera } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'

import { useEffect, useRef, useMemo } from "react";
import { usePersonControls } from './hooks/useKeyboardControls';
import { useForwardRaycast } from './hooks/useForwardRaycast';
import { useBox } from '@react-three/cannon';
import { Object3D, Raycaster, Vector3 } from 'three'

export default function Scene({ ...props }) {
  const { nodes, materials } = useSpline('https://prod.spline.design/iT1Og4mFFO46DKz5/scene.splinecode')
  // TODO: make the code reusable for other maps  ifthat gonna happen
  // just make each map a different spline scene and reuse the movment code between them  
  // use refs let us  modify the stata of the objects in the scene example position for movment
  const theMap = useRef()
  const thePlayer = useRef()
  const astroid = useRef()
  // const raycast = useForwardRaycast(thePlayer)
  const { left, right, jump } = usePersonControls()
  
  
  useFrame(() => {
    // this use frame does the satelite movment
    thePlayer.current.position.z+= 10*(Number(right) - Number(left))
    // thePlayer.current.position.x+= 100 * Number(jump);
    if(jump){
      thePlayer.current.position = [9000, 44, -16]
    }
    // if((thePlayer.current.position.x <= astroid.current.position.x +600) && (thePlayer.current.position.z-100 >= astroid.current.position.z) ){
    //   console.log('****************');
    // }
    
    // console.log(thePlayer.current.position.z +' - '+ astroid.current.position.z);
    // checking for collision 
    // const intersections = raycast()
    // thePlayer.current.getWorldDirection(x)
    // console.log(x);
    // console.log(intersections.length);
    // if(intersections.length>0){
    //   console.log("smthn");
    // }
  })
  // make whole map move to the player change value for more speed
  // TODO: for future if gonna add the skip some part of the map  just make the ending closer
  useFrame(() => {
    // console.log(theMap.current.position);
    // theMap.current.position.x+=5
    thePlayer.current.position.x -= 5
  })
  return (
    <>
      <color attach="background" args={['#696771']} />
      <group {...props} dispose={null}>
        <group ref={theMap} name="Group" position={[-10260.21, 79.69, 61]}>

        <group ref={thePlayer} name="player" position={[9000, 44, -16]} rotation={[-Math.PI / 2, 0, 1.59]}>
          <mesh
            name="Cylinder003"
            geometry={nodes.Cylinder003.geometry}
            material={nodes.Cylinder003.material}
            castShadow
            receiveShadow
            position={[-117.67, 200.14, -20.17]}
            rotation={[-1.49, 0.01, 1.56]}
            scale={[102.54, 110.33, 100.26]}
          />
        </group>
          <group
            name="asteroid 9"
            position={[6736.6, 43.1, 554.52]}
            rotation={[0, Math.PI / 2, 0]}
            scale={[1.16, 1.17, 1.19]}
          >
            <mesh
              name="Sphere"
              geometry={nodes.Sphere.geometry}
              material={nodes.Sphere.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            name="asteroid 8"
            position={[7887.4, 37.63, 566.81]}
            rotation={[0, Math.PI / 2, 0]}
            scale={[1.16, 1.17, 1.19]}
          >
            <mesh
              name="Sphere1"
              geometry={nodes.Sphere1.geometry}
              material={nodes.Sphere1.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            name="asteroid 7"
            position={[6736.6, 43.1, 982.83]}
            rotation={[0, Math.PI / 2, 0]}
            scale={[1.16, 1.17, 1.19]}
          >
            <mesh
              name="Sphere2"
              geometry={nodes.Sphere2.geometry}
              material={nodes.Sphere2.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            name="asteroid 3"
            position={[7887.4, 37.63, 956.38]}
            rotation={[0, Math.PI / 2, 0]}
            scale={[1.16, 1.17, 1.19]}
          >
            <mesh
              name="Sphere3"
              geometry={nodes.Sphere3.geometry}
              material={nodes.Sphere3.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            name="asteroid 6"
            position={[6736.6, 43.1, -605.1]}
            rotation={[0, Math.PI / 2, 0]}
            scale={[1.16, 1.17, 1.19]}
          >
            <mesh
              name="Sphere4"
              geometry={nodes.Sphere4.geometry}
              material={nodes.Sphere4.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            name="asteroid 2"
            position={[7887.4, 37.63, -592.82]}
            rotation={[0, Math.PI / 2, 0]}
            scale={[1.16, 1.17, 1.19]}
          >
            <mesh
              name="Sphere5"
              geometry={nodes.Sphere5.geometry}
              material={nodes.Sphere5.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            name="asteroid 5"
            position={[6753.87, 44.32, -16.33]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={[1.16, 1.2, 1.16]}
          >
            <mesh
              name="Sphere6"
              geometry={nodes.Sphere6.geometry}
              material={nodes.Sphere6.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <group
            ref = {astroid}
            name="asteroid"
            position={[7900, 44, -16]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={[1.16, 1.2, 1.16]}
          >
            <mesh
              name="Sphere7"
              geometry={nodes.Sphere7.geometry}
              material={nodes.Sphere7.material}
              castShadow
              receiveShadow
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
          <mesh
            name="ending"
            geometry={nodes.ending.geometry}
            material={materials['ending Material']}
            castShadow
            receiveShadow
            position={[-9010.79, -45.69, 0]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
            scale={[49.67, 1, 1]}
          />
          <mesh
            name="right wall"
            geometry={nodes['right wall'].geometry}
            material={materials['right wall Material']}
            position={[372.02, -19.73, -1730.39]}
            scale={[200, 1, 1]}
          />
          <mesh
            name="left wall"
            geometry={nodes['left wall'].geometry}
            material={materials['left wall Material']}
            position={[460.21, 0, 1526.91]}
            scale={[200, 1, 1]}
          />
          <mesh
            name="floor"
            geometry={nodes.floor.geometry}
            material={materials['floor Material']}
            castShadow
            receiveShadow
            position={[0, -95.69, -27.82]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
            scale={[3.06, 20, 5]}
          />
        </group>
        <PerspectiveCamera
          name="Camera"
          makeDefault={true}
          far={200000}
          near={5}
          fov={45}
          position={[2640.15, 1955.11, -32.01]}
          rotation={[-1.59, 1, 1.6]}
        />
        <directionalLight
          name="Directional Light"
          castShadow
          intensity={0.7}
          shadow-mapSize-width={1024}
          shadow-mapSize-height={1024}
          shadow-camera-near={-10000}
          shadow-camera-far={100000}
          shadow-camera-left={-500}
          shadow-camera-right={500}
          shadow-camera-top={500}
          shadow-camera-bottom={-500}
          position={[-138.67, 648.65, 183.29]}
        />
        <mesh
          name="Sphere8"
          geometry={nodes.Sphere8.geometry}
          material={materials['Sphere8 Material']}
          castShadow
          receiveShadow
          position={[0, -101, -49]}
          rotation={[0, 0, Math.PI]}
        />
        <hemisphereLight name="Default Ambient Light" intensity={0.75} color="#d4d4d4" position={[0, 1, 0]} />
      </group>
    </>
  )
}

